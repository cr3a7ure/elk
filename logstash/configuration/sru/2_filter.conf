filter {

	# parses the incoming messages with the built in apache log template.
	# see https://github.com/hpcugent/logstash-patterns/blob/master/files/grok-patterns#L94
	grok {
		id => "message_grok"
		patterns_dir => ["/usr/local/swissbib/logstash/pipeconf/patterns"]
		match => { "message" => "%{COMBINEDAPACHELOG}" }
		tag_on_failure => [ "_message_parse_failure" ]
	}

	# reformat timestamp for elastic.
	date {
		match => [ "timestamp", "dd/MMM/yyyy:HH:mm:ss Z" ]
		target => "@timestamp"
		remove_field => [ "timestamp" ]
	}
	
	# Add current hour and day of week to the event to be able to filter them.
	mutate {
		add_field => { "hour" => "%{+HH}" }
		add_field => { "week_day" => "%{+EEEE}" }
	}
	
	# remove fields with just a '-' in it. This way kibana can more easily deal with not existing fields.
	if ([ident] =~ /-/) {
		mutate {
			remove_field => [ "ident" ]
		}
	}

	if ([auth] =~ /-/) {
		mutate {
			remove_field => [ "auth" ]
		}
	}

	if ([referrer] =~ /-/) {
		mutate {
			remove_field => [ "referrer" ]
		}
	}
	
	# Add geo ip information from database.
	if ([clientip]) {
		geoip {
			source => "clientip"
			# use default database
			# database => "/usr/local/swissbib/logstash/pipeconf/geoip/GeoLite2-City.mmdb"
			target => "geoip"
			fields => ["city_name", "country_name", "location"]
			tag_on_failure => ["_geoip_lookup_failure"]
		}
	}
	
	# analyzes the user agent of the request and creates a user field
	# https://www.elastic.co/guide/en/logstash/current/plugins-filters-useragent.html
	# https://de.wikipedia.org/wiki/User_Agent
	if ([agent]){
		useragent {
			source => [ "agent" ]
			target => [ "userdata" ]
		}
	}
	
	# remove some fields whith information we don't really need
	# the add_field is required as there is a documented bug which makes the removal impossible otherwise.
	# leaves userdata.device, userdata.name & userdata.os_name.
	if ([userdata]){
		mutate {
			add_field => { "[userdata][os_major]" => "os_major_version" }
			remove_field => ["[userdata][os_major]", "[userdata][os_minor]", "[userdata][os]", "[userdata][patch]", "[userdata][major]", "[userdata][minor]", "[userdata][build]" ]
		}
	}
	
	# take the request apart.
	grok {
		id => "request_grok"
		match => { "request" => "\/%{WORD:root}\/%{WORD:page}\/%{USERNAME:database}\?%{GREEDYDATA:requestparams}" }
		tag_on_failure => [ "_request_parse_failure" ]
	}
	
	# translates database short cuts into their given names from the dropwdown menu.
	if ([database]) {
		translate {
				field => "[database]"
				destination => "[database]"
				override => true
				exact => true
				dictionary => [
					"defaultdb", "swissbib green - defaultdb",
					"ddefaultdb", "swissbib green - defaultdb",
					"bbdb", "Basel / Bern - bbdb",
					"jusdb", "content related to legal literature",
					"HAN", "Verbund HAN - Handschriften, Archive, Nachlässe",
					"HAN-AO", "Verbund HAN - Handschriften, Archive, Nachlässe - Datenexport nach Archives Online",		
					"MEAA", "Accademia di Architettura, Mendrisio",
					"A300", "Kunstmuseum Basel",
					"A150", "Zentralbibliothek Solothurn",
					"E74", "Ecole hôtelière de Lausanne",
					"eEdu", "Portal eEducation Universität Basel",
					"UBBSerara", "Universitätsbibliothek Basel, e-rara",
					"UBBSemanuscripta", "Universitätsbibliothek Basel, e-manuscripta"
				]

		}
	}
	
	if ([requestparams]){
	
		urldecode {
			field => "requestparams"
			charset => "UTF-8"
			tag_on_failure => ["_url_decode_failure"]
		}
	
		kv {
			source => "requestparams"
			target => "parameters"
			# whitlist of all included fields. if this is removed hundreds of fields are created.
			include_keys => [
								"availabledbs", "maximumrecords", "operation", "query", "recordpacking",
								"recordschema", "resultsetttl", "sortkeys", "startrecord", "version", 
								"x-info-10-get-holdings"
							]
			transform_key => "lowercase"
			field_split => "&"
			value_split => "="
		}
		
		if ([parameters][query]) {
		 	mutate {
				gsub => [ "[parameters][query]", "\+", " " ]
				copy => { "[parameters][query]" => "[parameters][search]" }
				split => { "[parameters][query]" => " " }
				gsub => [
					"[parameters][search]", "AND", "&",
					"[parameters][search]", "OR", "&",
					"[parameters][search]", "NOT", "&",
					"[parameters][search]", "exact", "=",
					"[parameters][search]", "all", "=",
					"[parameters][search]", "<", "=",
					"[parameters][search]", ">", "=",
					"[parameters][search]", "<=", "=",
					"[parameters][search]", ">=", "=",
					"[parameters][search]", "<>", "=",
					"[parameters][search]", "any", "="			
				]
			}
			
			kv {
				source => "[parameters][search]"
				target => "[parameters][query_fields]"
				transform_key => "lowercase"
				include_keys => [
						"dc.id", "dc.possessinginstitution", "dc.format", "dc.anywhere", "dc.xnetwork", 
						"dc.date", "dc.xfilter", "dc.localcode", "dc.wnel", "dc.creator", "dc.title",
						"dc.subject", "dc.identifier", "dc.language"
					]
				remove_char_key => " "
				remove_char_value => " "
				field_split => "&"
				value_split => "="
			}			
		}
	}

	mutate {
        copy => { "[host][name]" => "@temp" }
        remove_field => [ "[host][name]" ]
        copy => { "@temp" => "host" }
        remove_field => [ "@temp" ]
    }
}

